{
  "address": "0x43D9aC4E1609d78d819319364382fe5F5f92D4C0",
  "abi": [
    {
      "inputs": [],
      "name": "AccessControlBadConfirmation",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "neededRole",
          "type": "bytes32"
        }
      ],
      "name": "AccessControlUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "add",
          "type": "address"
        }
      ],
      "name": "AddressNotExist",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EmptyDescriptionNotAllowed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Unauthorized",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAddress",
          "type": "address"
        }
      ],
      "name": "AddAddress",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "functionSig",
          "type": "string"
        }
      ],
      "name": "PermissionGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "functionSig",
          "type": "string"
        }
      ],
      "name": "PermissionRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "existingAddress",
          "type": "address"
        }
      ],
      "name": "RemoveAddress",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "existingAddress",
          "type": "address"
        }
      ],
      "name": "UpdateDescription",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newAddress",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        }
      ],
      "name": "addAddresses",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "addDescription",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "functionSig",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "accountToPermit",
          "type": "address"
        }
      ],
      "name": "giveCallPermission",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "functionSig",
          "type": "string"
        }
      ],
      "name": "isAllowedToCall",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "existingAddress",
          "type": "address"
        }
      ],
      "name": "removeAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "callerConfirmation",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "functionSig",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "accountToRevoke",
          "type": "address"
        }
      ],
      "name": "revokeCallPermission",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "existingAddress",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        }
      ],
      "name": "updateDescription",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x0e9db42142b004b56d2bf7839781a9e48254a636b3accf3e85630d838fe657e0",
  "receipt": {
    "to": null,
    "from": "0x5295D4272bcA61321DFC40b8409F8d6f93F68ABE",
    "contractAddress": "0x43D9aC4E1609d78d819319364382fe5F5f92D4C0",
    "transactionIndex": 21,
    "gasUsed": "1149527",
    "logsBloom": "0x
    "blockHash": "0xd1894ce7eccb8bfc9e3079d5fd5d5ec38e119e1419c93d2a7f3c771454237858",
    "transactionHash": "0x0e9db42142b004b56d2bf7839781a9e48254a636b3accf3e85630d838fe657e0",
    "logs": [
      {
        "transactionIndex": 21,
        "blockNumber": 6455403,
        "transactionHash": "0x0e9db42142b004b56d2bf7839781a9e48254a636b3accf3e85630d838fe657e0",
        "address": "0x43D9aC4E1609d78d819319364382fe5F5f92D4C0",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005295d4272bca61321dfc40b8409f8d6f93f68abe",
          "0x0000000000000000000000005295d4272bca61321dfc40b8409f8d6f93f68abe"
        ],
        "data": "0x",
        "logIndex": 59,
        "blockHash": "0xd1894ce7eccb8bfc9e3079d5fd5d5ec38e119e1419c93d2a7f3c771454237858"
      }
    ],
    "blockNumber": 6455403,
    "cumulativeGasUsed": "5724876",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "be9ded52fec91bd9f31ce6db26bc68fe",
  "metadata": "{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AccessControlBadConfirmation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"neededRole\",\"type\":\"bytes32\"}],\"name\":\"AccessControlUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"add\",\"type\":\"address\"}],\"name\":\"AddressNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EmptyDescriptionNotAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"AddAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"functionSig\",\"type\":\"string\"}],\"name\":\"PermissionGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"functionSig\",\"type\":\"string\"}],\"name\":\"PermissionRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"existingAddress\",\"type\":\"address\"}],\"name\":\"RemoveAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"existingAddress\",\"type\":\"address\"}],\"name\":\"UpdateDescription\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"name\":\"addAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addDescription\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"functionSig\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"accountToPermit\",\"type\":\"address\"}],\"name\":\"giveCallPermission\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"functionSig\",\"type\":\"string\"}],\"name\":\"isAllowedToCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"existingAddress\",\"type\":\"address\"}],\"name\":\"removeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"callerConfirmation\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"functionSig\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"accountToRevoke\",\"type\":\"address\"}],\"name\":\"revokeCallPermission\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"existingAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"name\":\"updateDescription\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Manages a set of contract addresses with associated descriptions.      Includes functionality for adding, updating, and removing addresses.\",\"errors\":{\"AccessControlBadConfirmation()\":[{\"details\":\"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\"}],\"AccessControlUnauthorizedAccount(address,bytes32)\":[{\"details\":\"The `account` is missing a role.\"}],\"AddressNotExist(address)\":[{\"params\":{\"add\":\"The address that does not exist.\"}}]},\"events\":{\"AddAddress(address)\":{\"params\":{\"newAddress\":\"The address that was added.\"}},\"PermissionGranted(address,address,string)\":{\"details\":\"If contract address is 0x000..0 this means that the account is a default admin of this function and can call any contract function with this signature\"},\"RemoveAddress(address)\":{\"params\":{\"existingAddress\":\"The address that was removed.\"}},\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this.\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"},\"UpdateDescription(address)\":{\"params\":{\"existingAddress\":\"The address whose description was updated.\"}}},\"kind\":\"dev\",\"methods\":{\"addAddresses(address,string)\":{\"details\":\"Reverts if the address is zero or already exists.\",\"params\":{\"description\":\"The description of the address.\",\"newAddress\":\"The address to be added.\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"giveCallPermission(address,string,address)\":{\"custom:event\":\"Emits a {RoleGranted} and {PermissionGranted} events.\",\"details\":\"this function can be called only from Role Admin or DEFAULT_ADMIN_ROLEif contractAddress is zero address, the account can access the specified function      on **any** contract managed by this ACL\",\"params\":{\"accountToPermit\":\"account that will be given access to the contract function\",\"contractAddress\":\"address of contract for which call permissions will be granted\",\"functionSig\":\"signature e.g. \\\"functionName(uint256,bool)\\\"\"}},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"isAllowedToCall(address,address,string)\":{\"details\":\"Since restricted contracts using this function as a permission hook\",\"params\":{\"account\":\"for which call permissions will be checked\",\"functionSig\":\"restricted function signature e.g. \\\"functionName(uint256,bool)\\\"\"},\"returns\":{\"_0\":\"false if the user account cannot call the particular contract function\"}},\"removeAddress(address)\":{\"details\":\"Reverts if the address does not exist.\",\"params\":{\"existingAddress\":\"The address to be removed.\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event.\"},\"revokeCallPermission(address,string,address)\":{\"custom:event\":\"Emits {RoleRevoked} and {PermissionRevoked} events.\",\"details\":\"this function can be called only from Role Admin or DEFAULT_ADMIN_ROLE \\t\\tMay emit a {RoleRevoked} event.\",\"params\":{\"contractAddress\":\"address of contract for which call permissions will be revoked\",\"functionSig\":\"signature e.g. \\\"functionName(uint256,bool)\\\"\"}},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"updateDescription(address,string)\":{\"details\":\"Reverts if the address does not exist.\",\"params\":{\"description\":\"The new description of the address.\",\"existingAddress\":\"The address whose description is to be updated.\"}}},\"title\":\"ContractManager\",\"version\":1},\"userdoc\":{\"errors\":{\"AddressNotExist(address)\":[{\"notice\":\"Error indicating that an address does not exist.\"}],\"EmptyDescriptionNotAllowed()\":[{\"notice\":\"Error indicating empty description is not allowed\"}],\"Unauthorized()\":[{\"notice\":\"Error indicating that the caller is not authorized to perform an action.\"}]},\"events\":{\"AddAddress(address)\":{\"notice\":\"Emitted when a new address is added.\"},\"PermissionGranted(address,address,string)\":{\"notice\":\"Emitted when an account is given a permission to a certain contract function\"},\"PermissionRevoked(address,address,string)\":{\"notice\":\"Emitted when an account is revoked a permission to a certain contract function\"},\"RemoveAddress(address)\":{\"notice\":\"Emitted when an existing address is removed.\"},\"UpdateDescription(address)\":{\"notice\":\"Emitted when an existing address's description is updated.\"}},\"kind\":\"user\",\"methods\":{\"addAddresses(address,string)\":{\"notice\":\"Adds a new address with its description.\"},\"addDescription(address)\":{\"notice\":\"Mapping from contract address to its description.\"},\"giveCallPermission(address,string,address)\":{\"notice\":\"Gives a function call permission to one single account\"},\"isAllowedToCall(address,address,string)\":{\"notice\":\"Verifies if the given account can call a contract's guarded function\"},\"removeAddress(address)\":{\"notice\":\"Removes an existing address and its description.\"},\"revokeCallPermission(address,string,address)\":{\"notice\":\"Revokes an account's permission to a particular function call\"},\"updateDescription(address,string)\":{\"notice\":\"Updates the description of an existing address.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ContractManager.sol\":\"ContractManager\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessControl} from \\\"./IAccessControl.sol\\\";\\nimport {Context} from \\\"../utils/Context.sol\\\";\\nimport {ERC165} from \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address account => bool) hasRole;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 role => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\\n        return _roles[role].hasRole[account];\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\\n     * is missing `role`.\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert AccessControlUnauthorizedAccount(account, role);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\\n        if (callerConfirmation != _msgSender()) {\\n            revert AccessControlBadConfirmation();\\n        }\\n\\n        _revokeRole(role, callerConfirmation);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (!hasRole(role, account)) {\\n            _roles[role].hasRole[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (hasRole(role, account)) {\\n            _roles[role].hasRole[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa0e92d42942f4f57c5be50568dac11e9d00c93efcb458026e18d2d9b9b2e7308\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev The `account` is missing a role.\\n     */\\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\\n\\n    /**\\n     * @dev The caller of a function is not the expected one.\\n     *\\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\\n     */\\n    error AccessControlBadConfirmation();\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) external;\\n}\\n\",\"keccak256\":\"0xb6b36edd6a2999fd243ff226d6cbf84bd71af2432bbd0dfe19392996a1d9cb41\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"contracts/AccessControlWrapper.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity 0.8.25;\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\nabstract contract AccessControlWrapper is AccessControl {\\n    /// @notice Emitted when an account is given a permission to a certain contract function\\n    /// @dev If contract address is 0x000..0 this means that the account is a default admin of this function and\\n    /// can call any contract function with this signature\\n    event PermissionGranted(\\n        address account,\\n        address contractAddress,\\n        string functionSig\\n    );\\n\\n    /// @notice Emitted when an account is revoked a permission to a certain contract function\\n    event PermissionRevoked(\\n        address account,\\n        address contractAddress,\\n        string functionSig\\n    );\\n\\n    constructor() {\\n        // Grant the contract deployer the default admin role: it will be able\\n        // to grant and revoke any roles\\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n    }\\n\\n    /**\\n     * @notice Gives a function call permission to one single account\\n     * @dev this function can be called only from Role Admin or DEFAULT_ADMIN_ROLE\\n     * @param contractAddress address of contract for which call permissions will be granted\\n     * @dev if contractAddress is zero address, the account can access the specified function\\n     *      on **any** contract managed by this ACL\\n     * @param functionSig signature e.g. \\\"functionName(uint256,bool)\\\"\\n     * @param accountToPermit account that will be given access to the contract function\\n     * @custom:event Emits a {RoleGranted} and {PermissionGranted} events.\\n     */\\n    function giveCallPermission(\\n        address contractAddress,\\n        string calldata functionSig,\\n        address accountToPermit\\n    ) public {\\n        bytes32 role = keccak256(\\n            abi.encodePacked(contractAddress, functionSig)\\n        );\\n        grantRole(role, accountToPermit);\\n        emit PermissionGranted(accountToPermit, contractAddress, functionSig);\\n    }\\n\\n    /**\\n     * @notice Revokes an account's permission to a particular function call\\n     * @dev this function can be called only from Role Admin or DEFAULT_ADMIN_ROLE\\n     * \\t\\tMay emit a {RoleRevoked} event.\\n     * @param contractAddress address of contract for which call permissions will be revoked\\n     * @param functionSig signature e.g. \\\"functionName(uint256,bool)\\\"\\n     * @custom:event Emits {RoleRevoked} and {PermissionRevoked} events.\\n     */\\n    function revokeCallPermission(\\n        address contractAddress,\\n        string calldata functionSig,\\n        address accountToRevoke\\n    ) public {\\n        bytes32 role = keccak256(\\n            abi.encodePacked(contractAddress, functionSig)\\n        );\\n        revokeRole(role, accountToRevoke);\\n        emit PermissionRevoked(accountToRevoke, contractAddress, functionSig);\\n    }\\n\\n    /**\\n     * @notice Verifies if the given account can call a contract's guarded function\\n     * @dev Since restricted contracts using this function as a permission hook\\n     * @param account for which call permissions will be checked\\n     * @param functionSig restricted function signature e.g. \\\"functionName(uint256,bool)\\\"\\n     * @return false if the user account cannot call the particular contract function\\n     */\\n    function isAllowedToCall(\\n        address contractAddress,\\n        address account,\\n        string memory functionSig\\n    ) public view returns (bool) {\\n        bytes32 role = keccak256(abi.encodePacked(contractAddress, functionSig));\\n\\n        if (hasRole(role, account)) {\\n            return true;\\n        } else {\\n            role = keccak256(abi.encodePacked(address(0), functionSig));\\n            return hasRole(role, account);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x57c3954ca204f4065fd39909ea41e54ca3dcaa7cf53fded8e5357a7a64bcbb09\",\"license\":\"BSD-3-Clause\"},\"contracts/ContractManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.25;\\n\\nimport \\\"./AccessControlWrapper.sol\\\";\\n\\n/**\\n * @title ContractManager\\n * @dev Manages a set of contract addresses with associated descriptions.\\n *      Includes functionality for adding, updating, and removing addresses.\\n */\\ncontract ContractManager is AccessControlWrapper {\\n    /// @notice Mapping from contract address to its description.\\n    mapping(address => string) public addDescription;\\n\\n    /// @notice Emitted when a new address is added.\\n    /// @param newAddress The address that was added.\\n    event AddAddress(address newAddress);\\n\\n    /// @notice Emitted when an existing address's description is updated.\\n    /// @param existingAddress The address whose description was updated.\\n    event UpdateDescription(address existingAddress);\\n\\n    /// @notice Emitted when an existing address is removed.\\n    /// @param existingAddress The address that was removed.\\n    event RemoveAddress(address existingAddress);\\n\\n    /// @notice Error indicating that an address does not exist.\\n    /// @param add The address that does not exist.\\n    error AddressNotExist(address add);\\n\\n    /// @notice Error indicating that the caller is not authorized to perform an action.\\n    error Unauthorized();\\n\\n    /// @notice Error indicating empty description is not allowed\\n    error EmptyDescriptionNotAllowed();\\n\\n    /**\\n     * @notice Adds a new address with its description.\\n     * @dev Reverts if the address is zero or already exists.\\n     * @param newAddress The address to be added.\\n     * @param description The description of the address.\\n     */\\n    function addAddresses(\\n        address newAddress,\\n        string calldata description\\n    ) external {\\n        _checkAccessAllowed(\\\"addAddresses(address,string)\\\");\\n        require(_isValidContractAddress(newAddress), \\\"Not a valid address\\\");\\n\\n        require(\\n            bytes(addDescription[newAddress]).length == 0,\\n            \\\"Address already exists\\\"\\n        );\\n        if (bytes(description).length == 0) {\\n            revert EmptyDescriptionNotAllowed();\\n        }\\n\\n        addDescription[newAddress] = description;\\n        emit AddAddress(newAddress);\\n    }\\n\\n    /**\\n     * @notice Updates the description of an existing address.\\n     * @dev Reverts if the address does not exist.\\n     * @param existingAddress The address whose description is to be updated.\\n     * @param description The new description of the address.\\n     */\\n    function updateDescription(\\n        address existingAddress,\\n        string calldata description\\n    ) external {\\n        _checkAccessAllowed(\\\"updateDescription(address,string)\\\");\\n\\n        if (bytes(description).length == 0) {\\n            revert EmptyDescriptionNotAllowed();\\n        }\\n        if (bytes(addDescription[existingAddress]).length == 0) {\\n            revert AddressNotExist(existingAddress);\\n        }\\n        addDescription[existingAddress] = description;\\n        emit UpdateDescription(existingAddress);\\n    }\\n\\n    /**\\n     * @notice Removes an existing address and its description.\\n     * @dev Reverts if the address does not exist.\\n     * @param existingAddress The address to be removed.\\n     */\\n    function removeAddress(address existingAddress) external {\\n        _checkAccessAllowed(\\\"removeAddress(address)\\\");\\n\\n        if (bytes(addDescription[existingAddress]).length == 0) {\\n            revert AddressNotExist(existingAddress);\\n        }\\n        delete addDescription[existingAddress];\\n        emit RemoveAddress(existingAddress);\\n    }\\n\\n    /**\\n     * @dev Checks if the caller is allowed to call a specific function. Reverts with an Unauthorized error if the caller is not allowed.\\n     * @param signature The function signature to check.\\n     */\\n    function _checkAccessAllowed(string memory signature) internal view {\\n        bool isAllowed = isAllowedToCall(address(this), msg.sender, signature);\\n\\n        if (!isAllowed) {\\n            revert Unauthorized();\\n        }\\n    }\\n\\n    /**\\n     * @dev Checks for valid address\\n     * @param contractAddress Address of the contract\\n     */\\n    function _isValidContractAddress(\\n        address contractAddress\\n    ) internal view returns (bool) {\\n        uint256 size;\\n\\n        // Return the size of the code at the contractAddress\\n        assembly {\\n            size := extcodesize(contractAddress)\\n        }\\n        return size > 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa06a40f0aeb5a7a750e6cf6c052e1d09e4dae7e9867d1a32f8c82a4dbe864b8f\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052348015600f57600080fd5b506019600033601e565b5060c7565b6000828152602081815260408083206001600160a01b038516845290915281205460ff1660bd576000838152602081815260408083206001600160a01b03861684529091529020805460ff1916600117905560763390565b6001600160a01b0316826001600160a01b0316847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a450600160c1565b5060005b92915050565b61136f806100d66000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c8063584f6b601161008c57806391d148541161006657806391d14854146101e2578063a217fddf14610226578063a70cf6fa1461022e578063d547741f1461024e57600080fd5b8063584f6b60146101a957806376ac0205146101bc5780638bbb2cf2146101cf57600080fd5b80632f2ff15d116100c85780632f2ff15d1461015b57806336568abe146101705780634ba79dfe14610183578063545f7a321461019657600080fd5b806301ffc9a7146100ef57806308c4634214610117578063248a9ca31461012a575b600080fd5b6101026100fd366004610d70565b610261565b60405190151581526020015b60405180910390f35b610102610125366004610e0a565b6102fa565b61014d610138366004610edc565b60009081526020819052604090206001015490565b60405190815260200161010e565b61016e610169366004610ef5565b6103cb565b005b61016e61017e366004610ef5565b6103f6565b61016e610191366004610f21565b610454565b61016e6101a4366004610f85565b610594565b61016e6101b7366004610f85565b610611565b61016e6101ca366004610fea565b61067f565b61016e6101dd366004610fea565b610879565b6101026101f0366004610ef5565b60009182526020828152604080842073ffffffffffffffffffffffffffffffffffffffff93909316845291905290205460ff1690565b61014d600081565b61024161023c366004610f21565b6109cf565b60405161010e9190611061565b61016e61025c366004610ef5565b610a69565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f7965db0b0000000000000000000000000000000000000000000000000000000014806102f457507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b6000808483604051602001610310929190611094565b60408051601f198184030181529181528151602092830120600081815280845282812073ffffffffffffffffffffffffffffffffffffffff8916825290935291205490915060ff16156103675760019150506103c4565b60008360405160200161037b929190611094565b60408051808303601f190181529181528151602092830120600090815280835281812073ffffffffffffffffffffffffffffffffffffffff8816825290925290205460ff169150505b9392505050565b6000828152602081905260409020600101546103e681610a8e565b6103f08383610a9b565b50505050565b73ffffffffffffffffffffffffffffffffffffffff81163314610445576040517f6697b23200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61044f8282610b97565b505050565b6104926040518060400160405280601681526020017f72656d6f76654164647265737328616464726573732900000000000000000000815250610c52565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260016020526040902080546104c2906110df565b905060000361051a576040517f7d6b9c7100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff821660048201526024015b60405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8116600090815260016020526040812061054891610d22565b60405173ffffffffffffffffffffffffffffffffffffffff821681527f1216bc7305ad20d1e54ff9f2431a7e0cabd24f593b48a94b160dcb1c1312f1aa9060200160405180910390a150565b60008484846040516020016105ab93929190611132565b6040516020818303038152906040528051906020012090506105cd8183610a69565b7f55426a61e90ac7d7d1fc886b67b420ade8c8b535e68d655394bc271e3a12b8e2828686866040516106029493929190611171565b60405180910390a15050505050565b600084848460405160200161062893929190611132565b60405160208183030381529060405280519060200120905061064a81836103cb565b7f69c5ce2d658fea352a2464f87ffbe1f09746c918a91da0994044c3767d641b3f828686866040516106029493929190611171565b6106bd6040518060400160405280601c81526020017f61646441646472657373657328616464726573732c737472696e672900000000815250610c52565b823b610725576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f4e6f7420612076616c69642061646472657373000000000000000000000000006044820152606401610511565b73ffffffffffffffffffffffffffffffffffffffff831660009081526001602052604090208054610755906110df565b1590506107be576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4164647265737320616c726561647920657869737473000000000000000000006044820152606401610511565b60008190036107f9576040517f5b4b6e4400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8316600090815260016020526040902061082982848361121b565b5060405173ffffffffffffffffffffffffffffffffffffffff841681527ff479aa03776602139ad8a1cdaad9e683aa9a395b18958e3a69c05efb0fdb9df3906020015b60405180910390a1505050565b61089a60405180606001604052806021815260200161131960219139610c52565b60008190036108d5576040517f5b4b6e4400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff831660009081526001602052604090208054610905906110df565b9050600003610958576040517f7d6b9c7100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84166004820152602401610511565b73ffffffffffffffffffffffffffffffffffffffff8316600090815260016020526040902061098882848361121b565b5060405173ffffffffffffffffffffffffffffffffffffffff841681527f19cfd1d576e151624ef11855436d02f6e366b857e3f927ba92563cb6892307b89060200161086c565b600160205260009081526040902080546109e8906110df565b80601f0160208091040260200160405190810160405280929190818152602001828054610a14906110df565b8015610a615780601f10610a3657610100808354040283529160200191610a61565b820191906000526020600020905b815481529060010190602001808311610a4457829003601f168201915b505050505081565b600082815260208190526040902060010154610a8481610a8e565b6103f08383610b97565b610a988133610c9c565b50565b60008281526020818152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915281205460ff16610b8f5760008381526020818152604080832073ffffffffffffffffffffffffffffffffffffffff86168452909152902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055610b2d3390565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45060016102f4565b5060006102f4565b60008281526020818152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915281205460ff1615610b8f5760008381526020818152604080832073ffffffffffffffffffffffffffffffffffffffff8616808552925280832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016905551339286917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45060016102f4565b6000610c5f3033846102fa565b905080610c98576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050565b60008281526020818152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff16610c98576040517fe2517d3f00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8216600482015260248101839052604401610511565b508054610d2e906110df565b6000825580601f10610d3e575050565b601f016020900490600052602060002090810190610a9891905b80821115610d6c5760008155600101610d58565b5090565b600060208284031215610d8257600080fd5b81357fffffffff00000000000000000000000000000000000000000000000000000000811681146103c457600080fd5b803573ffffffffffffffffffffffffffffffffffffffff81168114610dd657600080fd5b919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080600060608486031215610e1f57600080fd5b610e2884610db2565b9250610e3660208501610db2565b9150604084013567ffffffffffffffff80821115610e5357600080fd5b818601915086601f830112610e6757600080fd5b813581811115610e7957610e79610ddb565b604051601f8201601f19908116603f01168101908382118183101715610ea157610ea1610ddb565b81604052828152896020848701011115610eba57600080fd5b8260208601602083013760006020848301015280955050505050509250925092565b600060208284031215610eee57600080fd5b5035919050565b60008060408385031215610f0857600080fd5b82359150610f1860208401610db2565b90509250929050565b600060208284031215610f3357600080fd5b6103c482610db2565b60008083601f840112610f4e57600080fd5b50813567ffffffffffffffff811115610f6657600080fd5b602083019150836020828501011115610f7e57600080fd5b9250929050565b60008060008060608587031215610f9b57600080fd5b610fa485610db2565b9350602085013567ffffffffffffffff811115610fc057600080fd5b610fcc87828801610f3c565b9094509250610fdf905060408601610db2565b905092959194509250565b600080600060408486031215610fff57600080fd5b61100884610db2565b9250602084013567ffffffffffffffff81111561102457600080fd5b61103086828701610f3c565b9497909650939450505050565b60005b83811015611058578181015183820152602001611040565b50506000910152565b602081526000825180602084015261108081604085016020870161103d565b601f01601f19169190910160400192915050565b7fffffffffffffffffffffffffffffffffffffffff0000000000000000000000008360601b168152600082516110d181601485016020870161103d565b919091016014019392505050565b600181811c908216806110f357607f821691505b60208210810361112c577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b7fffffffffffffffffffffffffffffffffffffffff0000000000000000000000008460601b168152818360148301376000910160140190815292915050565b600073ffffffffffffffffffffffffffffffffffffffff808716835280861660208401525060606040830152826060830152828460808401376000608084840101526080601f19601f850116830101905095945050505050565b601f82111561044f576000816000526020600020601f850160051c810160208610156111f45750805b601f850160051c820191505b8181101561121357828155600101611200565b505050505050565b67ffffffffffffffff83111561123357611233610ddb565b6112478361124183546110df565b836111cb565b6000601f84116001811461129957600085156112635750838201355b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600387901b1c1916600186901b178355611311565b600083815260209020601f19861690835b828110156112ca57868501358255602094850194600190920191016112aa565b5086821015611305577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60f88860031b161c19848701351681555b505060018560011b0183555b505050505056fe7570646174654465736372697074696f6e28616464726573732c737472696e6729a2646970667358221220ec12f64e2efc18d545c68150bbad206ca9a367c44d9a6b69d3431a35ad746fb764736f6c63430008190033",
  "deployedBytecode": "",
  "devdoc": {
    "details": "Manages a set of contract addresses with associated descriptions.      Includes functionality for adding, updating, and removing addresses.",
    "errors": {
      "AccessControlBadConfirmation()": [
        {
          "details": "The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}."
        }
      ],
      "AccessControlUnauthorizedAccount(address,bytes32)": [
        {
          "details": "The `account` is missing a role."
        }
      ],
      "AddressNotExist(address)": [
        {
          "params": {
            "add": "The address that does not exist."
          }
        }
      ]
    },
    "events": {
      "AddAddress(address)": {
        "params": {
          "newAddress": "The address that was added."
        }
      },
      "PermissionGranted(address,address,string)": {
        "details": "If contract address is 0x000..0 this means that the account is a default admin of this function and can call any contract function with this signature"
      },
      "RemoveAddress(address)": {
        "params": {
          "existingAddress": "The address that was removed."
        }
      },
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this."
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      },
      "UpdateDescription(address)": {
        "params": {
          "existingAddress": "The address whose description was updated."
        }
      }
    },
    "kind": "dev",
    "methods": {
      "addAddresses(address,string)": {
        "details": "Reverts if the address is zero or already exists.",
        "params": {
          "description": "The description of the address.",
          "newAddress": "The address to be added."
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "giveCallPermission(address,string,address)": {
        "custom:event": "Emits a {RoleGranted} and {PermissionGranted} events.",
        "details": "this function can be called only from Role Admin or DEFAULT_ADMIN_ROLEif contractAddress is zero address, the account can access the specified function      on **any** contract managed by this ACL",
        "params": {
          "accountToPermit": "account that will be given access to the contract function",
          "contractAddress": "address of contract for which call permissions will be granted",
          "functionSig": "signature e.g. \"functionName(uint256,bool)\""
        }
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "isAllowedToCall(address,address,string)": {
        "details": "Since restricted contracts using this function as a permission hook",
        "params": {
          "account": "for which call permissions will be checked",
          "functionSig": "restricted function signature e.g. \"functionName(uint256,bool)\""
        },
        "returns": {
          "_0": "false if the user account cannot call the particular contract function"
        }
      },
      "removeAddress(address)": {
        "details": "Reverts if the address does not exist.",
        "params": {
          "existingAddress": "The address to be removed."
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event."
      },
      "revokeCallPermission(address,string,address)": {
        "custom:event": "Emits {RoleRevoked} and {PermissionRevoked} events.",
        "details": "this function can be called only from Role Admin or DEFAULT_ADMIN_ROLE \t\tMay emit a {RoleRevoked} event.",
        "params": {
          "contractAddress": "address of contract for which call permissions will be revoked",
          "functionSig": "signature e.g. \"functionName(uint256,bool)\""
        }
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "updateDescription(address,string)": {
        "details": "Reverts if the address does not exist.",
        "params": {
          "description": "The new description of the address.",
          "existingAddress": "The address whose description is to be updated."
        }
      }
    },
    "title": "ContractManager",
    "version": 1
  },
  "userdoc": {
    "errors": {
      "AddressNotExist(address)": [
        {
          "notice": "Error indicating that an address does not exist."
        }
      ],
      "EmptyDescriptionNotAllowed()": [
        {
          "notice": "Error indicating empty description is not allowed"
        }
      ],
      "Unauthorized()": [
        {
          "notice": "Error indicating that the caller is not authorized to perform an action."
        }
      ]
    },
    "events": {
      "AddAddress(address)": {
        "notice": "Emitted when a new address is added."
      },
      "PermissionGranted(address,address,string)": {
        "notice": "Emitted when an account is given a permission to a certain contract function"
      },
      "PermissionRevoked(address,address,string)": {
        "notice": "Emitted when an account is revoked a permission to a certain contract function"
      },
      "RemoveAddress(address)": {
        "notice": "Emitted when an existing address is removed."
      },
      "UpdateDescription(address)": {
        "notice": "Emitted when an existing address's description is updated."
      }
    },
    "kind": "user",
    "methods": {
      "addAddresses(address,string)": {
        "notice": "Adds a new address with its description."
      },
      "addDescription(address)": {
        "notice": "Mapping from contract address to its description."
      },
      "giveCallPermission(address,string,address)": {
        "notice": "Gives a function call permission to one single account"
      },
      "isAllowedToCall(address,address,string)": {
        "notice": "Verifies if the given account can call a contract's guarded function"
      },
      "removeAddress(address)": {
        "notice": "Removes an existing address and its description."
      },
      "revokeCallPermission(address,string,address)": {
        "notice": "Revokes an account's permission to a particular function call"
      },
      "updateDescription(address,string)": {
        "notice": "Updates the description of an existing address."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 26,
        "contract": "contracts/ContractManager.sol:ContractManager",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)21_storage)"
      },
      {
        "astId": 603,
        "contract": "contracts/ContractManager.sol:ContractManager",
        "label": "addDescription",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_string_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)21_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)21_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(RoleData)21_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 18,
            "contract": "contracts/ContractManager.sol:ContractManager",
            "label": "hasRole",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 20,
            "contract": "contracts/ContractManager.sol:ContractManager",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      }
    }
  }
}
